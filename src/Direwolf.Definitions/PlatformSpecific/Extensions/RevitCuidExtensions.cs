using System.Security.Cryptography;
using System.Text;
using Autodesk.Revit.DB;
using Direwolf.Definitions.Extensions;
using Direwolf.Definitions.Serialization;

namespace Direwolf.Definitions.PlatformSpecific.Extensions;

public static class RevitCuidExtensions
{
    /// <summary>
    ///     Checks if this ID's counter (the save counter and the last save's unique ID) and the DocumentUniqueId are equal.
    ///     <remarks>
    ///         This only applies to CUID's generated with <see cref="CuidDriver.NewDirewolfId" />. Otherwise, it will always
    ///         return false.
    ///     </remarks>
    /// </summary>
    /// <param name="c">The Direwolf-generated CUID</param>
    /// <param name="doc">Revit Document.</param>
    /// <returns>True if the CUID was generated by the given Document, at its latest save state. False otherwise.</returns>
    public static bool? BelongsToSameDocumentAndSession(this Cuid c, Document doc)
    {
        if (c.Counter is null || c.Fingerprint is null) return null;
        return c.Counter.Equals(doc.GetDocumentVersionCounter()) &&
               c.Fingerprint.Equals(doc.GetDocumentVersionCounter());
    }

    /// <summary>
    ///     Checks if this Direwolf-generated CUID belongs to the given Document.
    ///     <remarks>
    ///         This only applies to CUID's generated with <see cref="CuidDriver.NewDirewolfId" />. Otherwise, it will always
    ///         return false.
    ///     </remarks>
    /// </summary>
    /// <param name="doc">Revit Document</param>
    /// <returns>True if this CUID was generated by the given <see cref="Document" />. False otherwise.</returns>
    public static bool? BelongsToSameDocument(this Cuid id, Document doc)
    {
        return id.Fingerprint?.Equals(doc.GetDocumentUuidHash());
    }

    public static Cuid CreateRevitId(this Document doc)
    {
        return CuidDriver.NewDirewolfId(doc);
    }

    public static string GetDocumentVersionCounter(this Document doc)
    {
        return CuidDriver.EncodeBase36(Document.GetDocumentVersion(doc).NumberOfSaves);
    }

    public static string GetDocumentUuidHash(this Document doc)
    {
        var base36Chars = CuidExtensions.Base36Chars.ToCharArray();
        var docUniqueId = doc.CreationGUID;
        var hashBytes = MD5.HashData(Encoding.UTF8.GetBytes(docUniqueId.ToString()));
        var sb = new StringBuilder();
        foreach (var b in hashBytes) sb.Append(base36Chars[b % 36]);
        Span<char> buffer = stackalloc char[4];
        for (var i = 0; i < buffer.Length; i++) buffer[i] = CuidExtensions.Base36Chars[hashBytes[i] % 36];
        return buffer.ToString();
    }

    public static string GetDocumentVersionHash(this Document doc)
    {
        return string.Concat(GetDocumentVersionCounter(doc), GetDocumentUuidHash(doc));
    }
}