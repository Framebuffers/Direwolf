using System.Text.Json.Serialization;
using Autodesk.Revit.DB;
using Direwolf.Definitions.Drivers;
using Direwolf.Definitions.Extensions;

namespace Direwolf.Definitions.Parser;

/// <summary>
///     A Collision-Resistant Unique Identifier is a lighter type of unique identifier, aimed to offer better
///     performance and readability than a traditional <see cref="Guid" />. It is designed to be sequentially-generated,
///     stores a timestamp of its generation within the string, whilst remaining resistant to two identical values
///     being generated.
///     This type of identifier is used inside <see cref="Direwolf" /> to identify Transactions and RevitElements.
///     <see cref="CuidDriver" /> is responsible for the generation of these identifiers.
///     For more information, visit:
///     <![CDATA[https://www.usefulids.com/resources/what-is-a-cuid]]>
/// </summary>
/// <param name="Length">The length of the randomly-generated part of the identifier.</param>
public readonly record struct Cuid(int Length = 16)
{
    public string? Value { get; init; } = null;
    [JsonIgnore] public long? TimestampMilliseconds { get; init; } = null;
    [JsonIgnore] public string? TimestampSubstring { get; init; } = null;
    [JsonIgnore] public string? CounterSubstring { get; init; } = null;
    [JsonIgnore] public string? FingerprintSubstring { get; init; } = null;
    [JsonIgnore] public string? RandomSubstring { get; init; } = null;

    public static Cuid Create(int length = 16)
    {
        var cuid = CuidDriver.GenerateCuid(16);
        var s = cuid.Value;
        Span<Range> random = [20..];
        var timestamp = s!.Substring(1, 7);
        return new Cuid
        {
            TimestampMilliseconds = CuidDriver.DecodeBase36(timestamp),
            TimestampSubstring = timestamp,
            CounterSubstring = s.Substring(8, 8),
            FingerprintSubstring = s.Substring(16, 4),
            RandomSubstring = random.ToString(),
            Length = random.Length,
            Value = s
        };
    }

    /// <summary>
    ///     Helper method for <see cref="CuidDriver.NewDirewolfId" />.
    ///     Generates a CUID where the <see cref="CounterSubstring" /> corresponds to a Base36 hash of the
    /// </summary>
    /// <param name="doc"></param>
    /// <param name="length"></param>
    /// <returns></returns>
    public static Cuid CreateRevitId(Document doc, out (string, string) docIdValues, int length = 16)
    {
        docIdValues = (doc.GetDocumentVersionCounter(), doc.GetDocumentVersionCounter());
        return CuidDriver.NewDirewolfId(doc, out docIdValues, length);
    }

    public override string ToString()
    {
        return Value ?? string.Empty;
    }

    /// <summary>
    ///     Checks if this ID's counter (the save counter and the last save's unique ID) and the DocumentUniqueId are equal.
    ///     <remarks>
    ///         This only applies to CUID's generated with <see cref="CuidDriver.NewDirewolfId" />. Otherwise, it will always
    ///         return false.
    ///     </remarks>
    /// </summary>
    /// <param name="c">The Direwolf-generated CUID</param>
    /// <param name="doc">Revit Document.</param>
    /// <returns>True if the CUID was generated by the given Document, at its latest save state. False otherwise.</returns>
    public static bool? BelongsToSameEpisode(Cuid c, Document doc)
    {
        if (c.CounterSubstring is null || c.FingerprintSubstring is null) return null;
        return c.CounterSubstring.Equals(doc.GetDocumentVersionCounter()) &&
               c.FingerprintSubstring.Equals(doc.GetDocumentVersionCounter());
    }

    /// <summary>
    ///     Checks if this Direwolf-generated CUID belongs to the given Document.
    ///     <remarks>
    ///         This only applies to CUID's generated with <see cref="CuidDriver.NewDirewolfId" />. Otherwise, it will always
    ///         return false.
    ///     </remarks>
    /// </summary>
    /// <param name="doc">Revit Document</param>
    /// <returns>True if this CUID was generated by the given <see cref="Document" />. False otherwise.</returns>
    public bool? BelongsToSameDocument(Document doc)
    {
        return FingerprintSubstring?.Equals(doc.GetDocumentUuidHash());
    }
}