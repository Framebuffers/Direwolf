using System.Text.Json.Serialization;
using Direwolf.Contracts;

namespace Direwolf.Primitives;

/// <summary>
///     Generic structure for Howls: a wrapper for an Instruction to be executed by a <see cref="Primitives.Wolf" />.
/// </summary>
public abstract record Howl : IHowl
{
    public string? Name { get; set; } = string.Empty;

    /// <summary>
    ///     Link back to the summoner of this task. Any <see cref="Prey" /> generated by this Howl is sent through this
    ///     property up the chain, eventually to the dispatch <see cref="Direwolf" />.
    /// </summary>
    [JsonIgnore]
    public IWolf Wolf { get; set; }

    /// <summary>
    ///     Abstract method to perform a task. Override this method with the code needed to perform any required tasks.
    /// </summary>
    /// <returns>True if task has been performed successfully, false if otherwise.</returns>
    public abstract IWolfpack? ExecuteHunt();

    // the default implementation will recursively serialize everything up the tree. that is: not good.
    public override string? ToString()
    {
        return Name;
    }
}