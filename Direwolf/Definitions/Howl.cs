using System.Text.Json.Serialization;
using Direwolf.Contracts;

namespace Direwolf.Definitions;

/// <summary>
///     Generic structure for Howls: a wrapper for an Instruction to be executed by a <see cref="Wolf" />.
/// </summary>
public record class Howl : IHowl
{
    /// <summary>
    ///     Link back to the summoner of this task. Any <see cref="Prey" /> generated by this Howl is sent through this
    ///     property up the chain, eventually to the dispatch <see cref="Howler" />.
    /// </summary>
    [JsonIgnore]
    public IWolf? Callback { get; set; }

    /// <summary>
    ///     Sends <see cref="Prey" /> packages up the chain to the <see cref="IWolf" />.
    /// </summary>
    /// <param name="c"></param>
    public void SendCatchToCallback(Prey c)
    {
        Callback?.Catches.Push(c);
    }

    /// <summary>
    ///     Virtual method to perform a task. Override this method with the code needed to perform any required tasks.
    /// </summary>
    /// <returns>True if task has been performed successfully, false if otherwise.</returns>
    public virtual bool Execute()
    {
        try
        {
            // A catch won't handle data retrieval on it's own, as it is just meant to be a dumb container.
            // Any data retrieval operation should be done here.
            // If, for example, the result returns a void or a bool itself (without having to get data itself)
            // Just return true. No need to forge a blank Catch. The Wolf *should* expect this result.
            if (Callback is not null) return true; // hunt successful!

            return false; // howled into the air, but no wolf to hear back...
        }
        catch
        {
            return false; // failed to hunt.
        }
    }

    public override string
        ToString() // the default implementation will recursively serialize everything up the tree. that is: not good.
    {
        var d = new Dictionary<string, object>
        {
            { "callback", Callback?.GetType().Name ?? "unknown" },
            { "createdAt", DateTime.Now.ToString() }
        };
        return new Prey(d).ToString();
    }
}