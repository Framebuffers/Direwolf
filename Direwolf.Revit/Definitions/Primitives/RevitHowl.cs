using System.Text.Json.Serialization;
using Autodesk.Revit.DB;
using Direwolf.Contracts;
using Direwolf.Revit.Contracts;

namespace Direwolf.Revit.Definitions.Primitives;

public abstract record RevitHowl : IRevitHowl
{
    public string? Name { get; set; } = string.Empty;


    /// <summary>
    ///     Link back to the summoner of this task. Any <see cref="Prey" /> generated by this Howl is sent through this
    ///     property up the chain, eventually to the dispatch <see cref="Direwolf" />.
    /// </summary>
    [JsonIgnore]
    public IWolf? Wolf { get; set; }
    protected Document? Document;

    public void SetRevitDocument(Document doc)
    {
        Document = doc;
    }

    public Document? GetRevitDocument() => Document;

    IWolfpack? IHowl.ExecuteHunt()
    {
        return ExecuteHunt();
    }

    /// <summary>
    ///     Abstract method to perform a task. Override this method with the code needed to perform any required tasks.
    /// </summary>
    /// <returns>True if task has been performed successfully, false if otherwise.</returns>
    public abstract RevitWolfpack? ExecuteHunt();

    // the default implementation will recursively serialize everything up the tree. that is: not good.
    public override string? ToString()
    {
        return Name;
    }
}